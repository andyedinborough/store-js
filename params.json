{"name":"store.js","body":"# [store.js](https://github.com/frankkohlhepp/store-js) v3.1.1\r\n*A powerful toolkit for localStorage.*\r\n\r\n### Info\r\nstore.js aims to solve a bunch of localStorage's problems.  \r\nThe main problem is that localStorage stringifies every value you save.  \r\nStarting with that issue, localStorage is not very powerful: You just can save key-value pairs. And that's it.  \r\nYou don't have any structure (or groups), you cannot make a second, clean group, you cannot set default values,\r\nand you cannot just put a group of values into an object. Also, there are no events.\r\n\r\nstore.js solves each and every one of those problems!\r\n\r\n### Howto\r\nstore.js groups your values into something called a store. Multiple stores are separated from each other.  \r\nSo let's make a new store:\r\n\r\n``` javascript\r\nvar settings = new Store(\"settings\");\r\n```\r\n\r\nJust choose a name for the new store, and save it in a variable. **Always** remember to use the \"new\" keyword! Never leave it off!  \r\nNow you can almost normally get, set and remove values:\r\n\r\n``` javascript\r\nsettings.set(\"color\", \"blue\");\r\nsettings.set(\"enable_test1\", true);\r\nsettings.set(\"number_of_rainbows\", 8);\r\n\r\n// and\r\n\r\nvar color = settings.get(\"color\");\r\n\r\n// and\r\n\r\nsettings.remove(\"color\");\r\n```\r\n\r\nPretty straight forward. But it automatically JSON-serializes and JSON-deserializes your values. So, if you put a boolean in, a boolean comes out.\r\nAll data types are supported (including objects and arrays), except functions and types that JSON can't parse.  \r\nnull is supported as a data type. undefined however means that there is no such value. So, to save \"nothing\", always use null.\r\n\r\nstore.js saves the values with the store's name and a prefix, e.g. the key \"color\" becomes \"store.settings.color\" in localStorage.\r\n\r\n### Defaults\r\nNow let's take a look at how you can specify some default values:\r\n\r\n``` javascript\r\nvar defaults = {\r\n    \"color\": \"red\",\r\n    \"enable_test1\": false\r\n};\r\n\r\nvar settings = new Store(\"settings\", defaults);\r\n```\r\n\r\nYou simply create an object with default values and pass it as the second argument to the constructor.  \r\nDefaults are saved in the instance variable \"defaults\". You can simple get or set the values from this object.\r\n\r\n``` javascript\r\nvar value = settings.defaults.myValue;\r\n\r\n// and\r\n\r\nsettings.defaults.myValue = value;\r\n```\r\n\r\nAfter changing the defaults, **always** reapply them by calling the method applyDefaults().  \r\nOf course this will not change values that are already set in localStorage.\r\n\r\n``` javascript\r\nsettings.defaults.myNewValue = something;\r\nsettings.applyDefaults();\r\n```\r\n\r\nEverything in your store is always based on the defaults. You can't remove a value which has a default.  \r\nIf you try to do so, the value is set to the default. If you want to remove a value with a default value, remove the default value first!\r\n\r\n### Objects\r\nIf you want to work with the contents of a store as an object, you can simply export and import the contents.  \r\nThere are two methods for it: toObject() and fromObject().\r\n\r\n``` javascript\r\nvar mySettings = settings.toObject();\r\n\r\n// and\r\n\r\nsettings.fromObject(mySettings);\r\n```\r\n\r\nfromObject() by default replaces the complete store with the values passed in.\r\n(But even here, defaults are taken into account, you can't remove values which have defaults.)  \r\nThis means, everything in the store gets removed, and replaced with your values.\r\n\r\nBut you can also merge. In this case, no values currently in the store get removed, only replaced.\r\nTo merge an object, pass true as the second parameter:\r\n\r\n``` javascript\r\nvar mySettings = {...};\r\nsettings.fromObject(mySettings, true);\r\n```\r\n\r\n### Events\r\nstore.js supports events. Fake events to be exact. There is no way to add an event listener\r\nfor localstorage to the DOM, so store.js emulates events by checking periodically for new values.  \r\nThe default period is 500ms. You can set a custom value by setting watcherSpeed in the constructor (third parameter).  \r\nKeep in mind that checking for new values costs CPU time, so use this setting wisely!\r\n\r\nTo add and remove listeners, use addEvent() and removeEvent().\r\n\r\n``` javascript\r\nsettings.addEvent(\"color\", function (value, name, store) {\r\n    console.log(\"New value of color is: \" + value);\r\n});\r\n```\r\n\r\nYou can also subscribe to all values (\"*\"):\r\n\r\n``` javascript\r\nsettings.addEvent(\"*\", function (value, name, store) {\r\n    console.log(name + \" in the store \" + store + \" has a new value: \" + value);\r\n});\r\n```\r\n\r\nThe callback function gets passed three arguments: the new value, the name of the value, and the name of the store.  \r\nRemove an event listener (you need to save a reference to the callback function when adding the event listener!):\r\n\r\n``` javascript\r\nvar myFunction = function (value, name, store) {\r\n    // do something\r\n};\r\n\r\nsettings.addEvent(\"color\", myFunction);\r\nsettings.removeEvent(\"color\", myFunction);\r\n```\r\n\r\n### Reference\r\n\\* = optional\r\n\r\n###### Constructor\r\n``` javascript\r\nvar settings = new Store(\"settings\", {\r\n    \"color\": \"blue\",\r\n    \"sound\": 0.8\r\n}, 1000);\r\n\r\n// OR...\r\n\r\nvar settings = new Store(\"settings\", null, 100);\r\n\r\n// OR...\r\n\r\nvar settings = new Store(\"settings\");\r\n```\r\n\r\n**Parameters**: name(string), *defaults(object) = {}, *watcherSpeed(number) = 500  \r\n**Return value**: store(object)\r\n\r\nCreates a new Store, optionally with default values and a custom watcher speed.  \r\nIf a value is already present in localStorage, it will not be overridden.  \r\nIf a value is not already present, it will be created with the default value.  \r\nwatcherSpeed is the period after which the event emulator checks for changes.\r\nKeep in mind that checking for new values costs CPU time, so use this setting wisely!\r\n\r\n###### clear() (class method)\r\n``` javascript\r\nStore.clear();\r\n```\r\n\r\n**Parameters**: (none)  \r\n**Return value**: (none)\r\n\r\nRemoves everything from localStorage.\r\n\r\n###### name (string)\r\nContains the name of the store.  \r\nDon't change it manually! Create a new store instead.\r\n\r\n###### defaults (object)\r\nContains the defaults.  \r\nYou may change this value manually, but you **must** run applyDefaults() afterwards!\r\n\r\n###### watcherSpeed (number)\r\nContains the period after which the event emulator checks for changes.  \r\nYou may change this value manually, but keep in mind that checking for new values costs CPU time, so use this setting wisely!\r\n\r\n###### listeners (object)\r\nContains the event listeners.  \r\nDon't tinker with it! Use addEvent() and removeEvent() instead!\r\n\r\n###### applyDefaults()\r\n``` javascript\r\nsettings.applyDefaults();\r\n```\r\n\r\n**Parameters**: (none)  \r\n**Return value**: store(object)\r\n\r\nUsed internally to apply defaults when necessary.  \r\n**Always** call this method when you update the defaults by changing the defaults instance variable.\r\n\r\n###### watcher()\r\n``` javascript\r\nsettings.watcher(true);\r\n\r\n// or\r\n\r\nsettings.watcher();\r\n```\r\n\r\n**Parameters**: *force(boolean) = false  \r\n**Return value**: store(object)\r\n\r\nUsed internally to start the watcher when adding event listeners.  \r\nDon't tinker with it, unless you know what you're doing!\r\n\r\n###### get()\r\n``` javascript\r\nvar color = settings.get(\"color\");\r\n```\r\n\r\n**Parameters**: name(string)  \r\n**Return value**: value(any) or undefined\r\n\r\nRetrieves a value. (And automatically JSON-deserializes it)  \r\nIf a value is not present in localStorage, it will return undefined.\r\n\r\n###### set()\r\n``` javascript\r\nsettings.set(\"color\", \"blue\");\r\n```\r\n\r\n**Parameters**: name(string), value(any)  \r\n**Return value**: store(object)\r\n\r\nSets a value. (And automatically JSON-serializes it)  \r\nIf the new value is undefined, the value will be removed from localStorage.  \r\nUse null instead, if you want to set a value to \"nothing\".\r\n\r\n###### remove()\r\n``` javascript\r\nsettings.remove(\"color\");\r\n```\r\n\r\n**Parameters**: name(string)  \r\n**Return value**: store(object)\r\n\r\nRemoves a value.  \r\nIf the value has a default, the value will fall back to the default.\r\n\r\n###### reset()\r\n``` javascript\r\nsettings.reset();\r\n```\r\n\r\n**Parameters**: (none)  \r\n**Return value**: store(object)\r\n\r\nRemoves all values of a store and restores the defaults.\r\n\r\n###### toObject()\r\n``` javascript\r\nvar object = settings.toObject();\r\n```\r\n\r\n**Parameters**: (none)  \r\n**Return value**: values(object)\r\n\r\nPuts all values of a store in an object.\r\n\r\n###### fromObject()\r\n``` javascript\r\nsettings.fromObject({\r\n    \"color\": \"brown\",\r\n    \"use_everything\": true,\r\n    \"be_a_hero\": true\r\n});\r\n```\r\n\r\n**Parameters**: values(object), *merge(boolean) = false  \r\n**Return value**: store(object)\r\n\r\nReplaces the store with the values from an object.  \r\nIf \"merge\" is false (which is the default), then the complete store will be removed, and replaced with the values. (Defaults will be restored anyways.)  \r\nIf \"merge\" is true, then new values will be added, different values will be replaced, all other values won't be touched.\r\n\r\n###### addEvent()\r\n``` javascript\r\nsettings.addEvent(\"color\", function (value, name, store) {\r\n    // ...\r\n});\r\n\r\n// OR...\r\n\r\nsettings.addEvent(\"*\", function (value, name, store) {\r\n    // ...\r\n});\r\n```\r\n\r\n**Parameters**: selector(string), callback(function)  \r\n**Return value**: store(object)\r\n\r\nAdds an event listener for a specific value or all values (\"*\").  \r\nThe callback function gets passed three arguments: the new value, the name of the value, and the name of the store.\r\n\r\n###### removeEvent()\r\n``` javascript\r\nsettings.removeEvent(\"color\", callback);\r\n\r\n// OR...\r\n\r\nsettings.removeEvent(\"*\", callback);\r\n```\r\n\r\n**Parameters**: selector(string), callback(function)  \r\n**Return value**: store(object)\r\n\r\nRemoves an event listener for a specific value or all values (\"*\").  \r\nThe callback must be a pointer to a previously with addEvent() added function.\r\n\r\n###### fireEvent()\r\n``` javascript\r\nsettings.fireEvent(\"color\", \"blue\");\r\n```\r\n\r\n**Parameters**: name(string), value(any)  \r\n**Return value**: store(object)\r\n\r\nUsed internally to fire events.  \r\nDon't tinker with it, unless you know what you're doing!\r\n\r\n### License\r\nstore.js is licensed under the **MIT-license**.  \r\nFor details see *LICENSE.txt*","google":"","tagline":"A powerful toolkit for localStorage.","note":"Don't delete this file! It's used internally to help with page regeneration."}